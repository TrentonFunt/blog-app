{
  "categories": [
    {
      "name": "JavaScript",
      "slug": "javascript",
      "description": "JavaScript programming articles and tutorials",
      "color": "#F7DF1E",
      "icon": "js"
    },
    {
      "name": "React",
      "slug": "react",
      "description": "React.js development and best practices",
      "color": "#61DAFB",
      "icon": "react"
    },
    {
      "name": "Node.js",
      "slug": "nodejs",
      "description": "Server-side JavaScript with Node.js",
      "color": "#339933",
      "icon": "node"
    },
    {
      "name": "CSS",
      "slug": "css",
      "description": "CSS styling and design techniques",
      "color": "#1572B6",
      "icon": "css"
    },
    {
      "name": "Web Development",
      "slug": "web-development",
      "description": "General web development topics",
      "color": "#FF6B6B",
      "icon": "web"
    },
    {
      "name": "Tutorials",
      "slug": "tutorials",
      "description": "Step-by-step learning guides",
      "color": "#4ECDC4",
      "icon": "tutorial"
    }
  ],
  "authors": [
    {
      "name": "Sarah Johnson",
      "email": "sarah@example.com",
      "bio": "Frontend developer with 5+ years experience in React and JavaScript. Passionate about creating beautiful user interfaces.",
      "website": "https://sarahjohnson.dev"
    },
    {
      "name": "Mike Chen",
      "email": "mike@example.com", 
      "bio": "Full-stack developer specializing in Node.js and modern web technologies. Loves sharing knowledge through writing.",
      "website": "https://mikechen.dev"
    },
    {
      "name": "Emily Rodriguez",
      "email": "emily@example.com",
      "bio": "UI/UX designer and CSS expert. Creating stunning designs and teaching others the art of web design.",
      "website": "https://emilyrodriguez.design"
    }
  ],
  "tags": [
    { "name": "beginner", "slug": "beginner", "color": "#10B981" },
    { "name": "advanced", "slug": "advanced", "color": "#EF4444" },
    { "name": "tutorial", "slug": "tutorial", "color": "#3B82F6" },
    { "name": "tips", "slug": "tips", "color": "#F59E0B" },
    { "name": "best-practices", "slug": "best-practices", "color": "#8B5CF6" },
    { "name": "performance", "slug": "performance", "color": "#06B6D4" },
    { "name": "security", "slug": "security", "color": "#DC2626" },
    { "name": "accessibility", "slug": "accessibility", "color": "#059669" }
  ],
  "posts": [
    {
      "title": "Mastering CSS Grid: A Complete Guide for Modern Layouts",
      "excerpt": "Learn how to create complex, responsive layouts with CSS Grid. This comprehensive guide covers everything from basic concepts to advanced techniques.",
      "content": "<h2>Introduction to CSS Grid</h2><p>CSS Grid is a powerful layout system that allows you to create complex, two-dimensional layouts with ease. Unlike Flexbox, which is primarily for one-dimensional layouts, Grid excels at creating both rows and columns simultaneously.</p><h3>Basic Grid Concepts</h3><p>To get started with CSS Grid, you need to understand a few key concepts:</p><ul><li><strong>Grid Container:</strong> The parent element that has <code>display: grid</code></li><li><strong>Grid Items:</strong> The direct children of the grid container</li><li><strong>Grid Lines:</strong> The horizontal and vertical lines that divide the grid</li><li><strong>Grid Tracks:</strong> The space between two adjacent grid lines</li></ul><h3>Creating Your First Grid</h3><pre><code>.grid-container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: auto 1fr auto;\n  gap: 20px;\n}</code></pre><p>This creates a three-column grid where the middle column is twice as wide as the side columns, with three rows and a 20px gap between all items.</p><h3>Advanced Grid Techniques</h3><p>Once you're comfortable with the basics, you can explore more advanced features like:</p><ul><li>Named grid lines</li><li>Grid areas</li><li>Auto-fit and auto-fill</li><li>Subgrid (when browser support improves)</li></ul><p>CSS Grid is now supported in all modern browsers, making it the go-to choice for complex layouts.</p>",
      "category": "CSS",
      "readTime": 8,
      "author": "Emily Rodriguez"
    },
    {
      "title": "Building Scalable Node.js Applications: Architecture Patterns",
      "excerpt": "Discover the best practices and architectural patterns for building scalable Node.js applications that can handle millions of users.",
      "content": "<h2>Why Scalability Matters</h2><p>As your Node.js application grows, you'll need to consider scalability from the ground up. Poor architecture decisions early on can lead to significant refactoring later.</p><h3>Microservices Architecture</h3><p>One of the most effective patterns for scalable applications is the microservices architecture:</p><pre><code>// Example service structure\nconst express = require('express');\nconst app = express();\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ status: 'healthy', timestamp: new Date() });\n});\n\n// Service-specific routes\napp.use('/api/users', userRoutes);\napp.use('/api/orders', orderRoutes);</code></pre><h3>Database Optimization</h3><p>Database performance is crucial for scalability:</p><ul><li>Use connection pooling</li><li>Implement proper indexing</li><li>Consider read replicas for read-heavy workloads</li><li>Use caching strategies (Redis, Memcached)</li></ul><h3>Load Balancing</h3><p>Distribute traffic across multiple instances:</p><pre><code>// Using PM2 for process management\npm2 start app.js -i max --name \"api-server\"</code></pre><p>This approach ensures your application can handle increased load while maintaining performance.</p>",
      "category": "Node.js",
      "readTime": 12,
      "author": "Mike Chen"
    },
    {
      "title": "React Performance Optimization: 10 Essential Techniques",
      "excerpt": "Learn the most effective techniques to optimize your React applications for better performance and user experience.",
      "content": "<h2>Understanding React Performance</h2><p>React is fast by default, but as applications grow in complexity, performance issues can arise. Here are the essential techniques to keep your React apps running smoothly.</p><h3>1. Use React.memo()</h3><p>Prevent unnecessary re-renders of functional components:</p><pre><code>const ExpensiveComponent = React.memo(({ data }) => {\n  return (\n    <div>\n      {data.map(item => (\n        <Item key={item.id} {...item} />\n      ))}\n    </div>\n  );\n});</code></pre><h3>2. Optimize with useMemo() and useCallback()</h3><p>Memoize expensive calculations and functions:</p><pre><code>const ExpensiveComponent = ({ items, filter }) => {\n  const filteredItems = useMemo(() => {\n    return items.filter(item => item.category === filter);\n  }, [items, filter]);\n\n  const handleClick = useCallback((id) => {\n    // Handle click logic\n  }, []);\n\n  return (\n    <div>\n      {filteredItems.map(item => (\n        <Item key={item.id} onClick={handleClick} {...item} />\n      ))}\n    </div>\n  );\n};</code></pre><h3>3. Code Splitting with React.lazy()</h3><p>Load components only when needed:</p><pre><code>const LazyComponent = React.lazy(() => import('./LazyComponent'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <LazyComponent />\n    </Suspense>\n  );\n}</code></pre><h3>4. Virtual Scrolling for Large Lists</h3><p>For lists with thousands of items, implement virtual scrolling to only render visible items.</p><h3>5. Bundle Analysis</h3><p>Regularly analyze your bundle size and identify opportunities for optimization.</p>",
      "category": "React",
      "readTime": 10,
      "author": "Sarah Johnson"
    },
    {
      "title": "JavaScript ES2024 Features: What's New and Exciting",
      "excerpt": "Explore the latest JavaScript features introduced in ES2024 and learn how to use them in your projects.",
      "content": "<h2>Welcome to ES2024</h2><p>JavaScript continues to evolve, and ES2024 brings several exciting new features that make development more efficient and enjoyable.</p><h3>1. Array.prototype.groupBy()</h3><p>Group array elements by a key:</p><pre><code>const users = [\n  { name: 'John', age: 25, city: 'New York' },\n  { name: 'Jane', age: 30, city: 'London' },\n  { name: 'Bob', age: 25, city: 'New York' }\n];\n\nconst groupedByAge = users.groupBy(user => user.age);\n// Result: { 25: [...], 30: [...] }</code></pre><h3>2. Promise.withResolvers()</h3><p>Create a promise with external resolve/reject control:</p><pre><code>const { promise, resolve, reject } = Promise.withResolvers();\n\n// Use resolve and reject externally\nsetTimeout(() => resolve('Success!'), 1000);\n\npromise.then(result => console.log(result));</code></pre><h3>3. Temporal API (Stage 3)</h3><p>Better date and time handling:</p><pre><code>import { Temporal } from '@js-temporal/polyfill';\n\nconst now = Temporal.Now.plainDateTimeISO();\nconst tomorrow = now.add({ days: 1 });\n\nconsole.log(tomorrow.toString());</code></pre><h3>4. Decorators (Stage 3)</h3><p>Add metadata and behavior to classes and methods:</p><pre><code>@observable\nclass UserStore {\n  @action\n  updateUser(user) {\n    this.user = user;\n  }\n}</code></pre><h3>Browser Support</h3><p>Check the current browser support for these features and use polyfills when necessary for production applications.</p>",
      "category": "JavaScript",
      "readTime": 7,
      "author": "Sarah Johnson"
    },
    {
      "title": "Web Accessibility: Building Inclusive User Experiences",
      "excerpt": "Learn how to create web applications that are accessible to all users, including those with disabilities.",
      "content": "<h2>Why Accessibility Matters</h2><p>Web accessibility ensures that your applications can be used by everyone, regardless of their abilities or the devices they use. It's not just the right thing to doâ€”it's often legally required.</p><h3>WCAG Guidelines</h3><p>The Web Content Accessibility Guidelines (WCAG) provide a framework for accessible design:</p><ul><li><strong>Perceivable:</strong> Information must be presentable in ways users can perceive</li><li><strong>Operable:</strong> Interface components must be operable</li><li><strong>Understandable:</strong> Information and UI operation must be understandable</li><li><strong>Robust:</strong> Content must be robust enough for various assistive technologies</li></ul><h3>Semantic HTML</h3><p>Use proper HTML elements to convey meaning:</p><pre><code><!-- Good: Semantic structure -->\n<main>\n  <header>\n    <h1>Page Title</h1>\n    <nav aria-label=\"Main navigation\">\n      <ul>\n        <li><a href=\"/home\">Home</a></li>\n        <li><a href=\"/about\">About</a></li>\n      </ul>\n    </nav>\n  </header>\n  <section>\n    <h2>Content Section</h2>\n    <p>Your content here...</p>\n  </section>\n</main></code></pre><h3>ARIA Labels and Roles</h3><p>Enhance accessibility with ARIA attributes:</p><pre><code><button \n  aria-label=\"Close dialog\"\n  aria-expanded=\"false\"\n  aria-controls=\"dialog-content\"\n>\n  Ã—\n</button></code></pre><h3>Keyboard Navigation</h3><p>Ensure all interactive elements are keyboard accessible:</p><ul><li>Use proper tab order</li><li>Provide visible focus indicators</li><li>Implement keyboard shortcuts</li><li>Handle focus management in modals</li></ul><h3>Testing Accessibility</h3><p>Use tools like axe-core, Lighthouse, and screen readers to test your applications.</p>",
      "category": "Web Development",
      "readTime": 9,
      "author": "Emily Rodriguez"
    },
    {
      "title": "Getting Started with TypeScript: A Beginner's Guide",
      "excerpt": "Learn TypeScript from the ground up and discover how it can improve your JavaScript development workflow.",
      "content": "<h2>What is TypeScript?</h2><p>TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale. It adds static type definitions to JavaScript, making your code more robust and maintainable.</p><h3>Why Use TypeScript?</h3><p>TypeScript offers several benefits:</p><ul><li><strong>Type Safety:</strong> Catch errors at compile time</li><li><strong>Better IDE Support:</strong> Enhanced autocomplete and refactoring</li><li><strong>Documentation:</strong> Types serve as living documentation</li><li><strong>Scalability:</strong> Easier to maintain large codebases</li></ul><h3>Basic Types</h3><p>TypeScript provides several built-in types:</p><pre><code>// Primitive types\nlet name: string = \"John\";\nlet age: number = 25;\nlet isActive: boolean = true;\n\n// Arrays\nlet numbers: number[] = [1, 2, 3, 4, 5];\nlet names: Array<string> = [\"Alice\", \"Bob\", \"Charlie\"];\n\n// Objects\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  isActive?: boolean; // Optional property\n}\n\nconst user: User = {\n  id: 1,\n  name: \"John Doe\",\n  email: \"john@example.com\"\n};</code></pre><h3>Functions and Classes</h3><p>TypeScript enhances functions and classes with type annotations:</p><pre><code>// Function with typed parameters and return type\nfunction calculateTotal(price: number, tax: number): number {\n  return price + (price * tax);\n}\n\n// Class with typed properties and methods\nclass Calculator {\n  private result: number = 0;\n\n  add(value: number): this {\n    this.result += value;\n    return this;\n  }\n\n  getResult(): number {\n    return this.result;\n  }\n}</code></pre><h3>Getting Started</h3><p>To start using TypeScript:</p><ol><li>Install TypeScript globally: <code>npm install -g typescript</code></li><li>Initialize a project: <code>tsc --init</code></li><li>Create your first <code>.ts</code> file</li><li>Compile to JavaScript: <code>tsc filename.ts</code></li></ol><p>TypeScript is an excellent choice for both small projects and large-scale applications.</p>",
      "category": "Tutorials",
      "readTime": 11,
      "author": "Mike Chen"
    }
  ]
}
